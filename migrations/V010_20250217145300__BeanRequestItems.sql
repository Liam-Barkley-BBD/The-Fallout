/*

  ____                   _____                            _   _____ _                 
 |  _ \                 |  __ \                          | | |_   _| |                
 | |_) | ___  __ _ _ __ | |__) |___  __ _ _   _  ___  ___| |_  | | | |_ ___ _ __ ___  
 |  _ < / _ \/ _` | '_ \|  _  // _ \/ _` | | | |/ _ \/ __| __| | | | __/ _ \ '_ ` _ \ 
 | |_) |  __/ (_| | | | | | \ \  __/ (_| | |_| |  __/\__ \ |_ _| |_| ||  __/ | | | | |
 |____/ \___|\__,_|_| |_|_|  \_\___|\__, |\__,_|\___||___/\__|_____|\__\___|_| |_| |_|
                                       | |                                            
                                       |_|                                            
*/

-- CREATE TABLE "BeanRequestItem" (
--   "BeanRequestItemID" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
--   "CannedBeanID" integer,
--   "NumberOfCans" integer,
--   "BeanRequestID" integer
-- );

ALTER TABLE "BeanRequestItem"
ADD CONSTRAINT CHK_NoC CHECK ("NumberOfCans" > 0);

ALTER TABLE "BeanRequestItem"
ALTER COLUMN "CannedBeanID" SET NOT NULL,
ALTER COLUMN "NumberOfCans" SET NOT NULL,
ALTER COLUMN "BeanRequestID" SET NOT NULL;

/*
BeanRequestItem Procedures
*/

-- Inserting into BeanRequestItem

CREATE OR REPLACE PROCEDURE InsertBeanRequestItem(
    IN P_CannedBeanID INTEGER,
    IN P_NumberOfCans INTEGER,
    IN P_BeanRequestID INTEGER
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Checking if the CannedBeanID exists
    IF NOT EXISTS (SELECT 1 FROM "CannedBeans" WHERE "CannedBeanID" = P_CannedBeanID) THEN
        RAISE EXCEPTION 'CannedBeanID % does not exist', P_CannedBeanID;
    END IF;

    IF P_NumberOfCans <= 0 THEN
      RAISE EXCEPTION 'NumberOfCans has to be a positive integer';
    END IF;

    IF NOT EXISTS (SELECT 1 FROM "BeanRequests" WHERE "BeanRequestID" = P_BeanRequestID) THEN
        RAISE EXCEPTION 'BeanRequestID % does not exist', P_BeanRequestID;
    END IF;

    INSERT INTO "BeanRequestItem" ("CannedBeanID", "NumberOfCans", "BeanRequestID")
    VALUES (P_CannedBeanID, P_NumberOfCans, P_BeanRequestID);

    RAISE NOTICE 'Successfully inserted bean request item for request with 
    BeanRequestID %', P_BeanRequestID;

    EXCEPTION
        WHEN others THEN
            RAISE EXCEPTION 'Error inserting bean request item: %', SQLERRM;
END;
$$;

-- Updating a record in BeanRequestItem

CREATE OR REPLACE PROCEDURE UpdateBeanRequestItem(
    IN P_BeanRequestItemID INTEGER,
    IN P_CannedBeanID INTEGER DEFAULT NULL,
    IN P_NumberOfCans INTEGER DEFAULT NULL,
    IN P_BeanRequestID INTEGER DEFAULT NULL
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Checking if the BeanRequestID exists
    IF NOT EXISTS (SELECT 1 FROM "BeanRequestItem" WHERE "BeanRequestItemID" = P_BeanRequestItemID) THEN
        RAISE EXCEPTION 'BeanRequestItemID % does not exist', P_BeanRequestItemID;
    END IF;

    -- If CannedBeanID is provided, check if it exists
    IF P_CannedBeanID IS NOT NULL THEN
      IF NOT EXISTS (SELECT 1 FROM "CannedBeans" WHERE "CannedBeanID" = P_CannedBeanID) THEN
        RAISE EXCEPTION 'CannedBeanID % does not exist', P_CannedBeanID;
      END IF;
    END IF;

    IF P_NumberOfCans IS NOT NULL AND P_NumberOfCans <= 0 THEN
      RAISE EXCEPTION 'NumberOfCans has to be a positive integer';
    END IF;

    IF P_BeanRequestID IS NOT NULL THEN
      IF NOT EXISTS (SELECT 1 FROM "BeanRequests" WHERE "BeanRequestID" = P_BeanRequestID) THEN
        RAISE EXCEPTION 'BeanRequestID % does not exist', P_BeanRequestID;
      END IF;
    END IF;

    -- Finally perform the BeanRequestItem update
    UPDATE "BeanRequestItem"
    SET 
        "CannedBeanID" = COALESCE(P_CannedBeanID, "CannedBeanID"),
        "NumberOfCans" = COALESCE(P_NumberOfCans, "NumberOfCans"),
        "BeanRequestID" = COALESCE(P_BeanRequestID, "BeanRequestID")
    WHERE "BeanRequestItemID" = P_BeanRequestItemID;

    -- Success! :)
    RAISE NOTICE 'Successfully updated BeanRequestItemID %', P_BeanRequestItemID;

    EXCEPTION
        WHEN others THEN
            RAISE EXCEPTION 'Error updating bean request item: %', SQLERRM;
END;
$$;

-- Deleting a record in BeanRequestItem

CREATE OR REPLACE PROCEDURE DeleteBeanRequestItem(
    IN P_BeanRequestItemID INTEGER
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Checking if the BeanRequestItemID exists
    IF NOT EXISTS (SELECT 1 FROM "BeanRequestItem" WHERE "BeanRequestItemID" = P_BeanRequestItemID) THEN
        RAISE EXCEPTION 'BeanRequestItemID % does not exist', P_BeanRequestItemID;
    END IF;

    -- Get outta here (Deleting the BeanRequestItem)
    DELETE FROM "BeanRequestItem"
    WHERE "BeanRequestItemID" = P_BeanRequestItemID;

    -- Success! :)
    RAISE NOTICE 'Successfully deleted BeanRequestItemID %', P_BeanRequestItemID;

    EXCEPTION
        WHEN others THEN
            RAISE EXCEPTION 'Error deleting bean request item: %', SQLERRM;
END;
$$;

CREATE OR REPLACE PROCEDURE UpdateNumberOfCans(
  IN P_BeanRequestItemID INTEGER,
  IN P_NumberOfCans INTEGER
)
LANGUAGE plpgsql
AS $$
BEGIN
  CALL UpdateBeanRequestItem(P_BeanRequestItemID, NULL, P_NumberOfCans, NULL);

  -- Success! :)
    RAISE NOTICE 'Successfully updated number of cans for BeanRequestItemID %',
    P_BeanRequestItemID;

    EXCEPTION
        WHEN others THEN
            RAISE EXCEPTION 'Error updating number of cans for request item %: %',
            P_BeanRequestItemID, SQLERRM;
END;
$$;

/*
BeanRequests and BeanRequestItem Views
*/

CREATE OR REPLACE VIEW BeanRequestDetails AS
SELECT 
    bri."BeanRequestID",
    cb."CannedBeanID",
    cb."BeanType",
    bri."NumberOfCans"
FROM "BeanRequestItem" bri
JOIN "CannedBeans" cb ON bri."CannedBeanID" = cb."CannedBeanID";

CREATE OR REPLACE VIEW SurvivorPendingBeanRequests AS
SELECT 
    br."SurvivorID",
    SUM(bri."NumberOfCans") AS "TotalCansRequested"
FROM "BeanRequests" br
JOIN "BeanRequestItem" bri ON br."BeanRequestID" = bri."BeanRequestID"
WHERE br."ApprovalDate" IS NULL
GROUP BY br."SurvivorID";