name: "Deploy DB"

on:
  push:
    branches:
      - dev  

jobs:
  Create-rds:
    runs-on: ubuntu-latest

    env:
      DB_INSTANCE_IDENTIFIER: "fallout-db-3"
      DB_INSTANCE_CLASS: "db.t4g.micro"
      DB_STORAGE: 20
      DB_ENGINE: "postgres"

    steps:
      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.LIAM_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.LIAM_SECRET_ACCESS_KEY }}
        #   aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: 'af-south-1'

      - name: Check existence of RDS
        id: check-db
        run: |
          echo "Checking if RDS instance exists..."
          if aws rds describe-db-instances --db-instance-identifier ${{ env.DB_INSTANCE_IDENTIFIER }} > /dev/null 2>&1; then
            echo "DB_EXISTS=true" >> $GITHUB_ENV
            echo "RDS instance exists."
          else
            echo "DB_EXISTS=false" >> $GITHUB_ENV
            echo "RDS instance does not exist."
          fi
          echo "Exit code: $?"

      - name: Create RDS Postgres instance if not exists
        if: env.DB_EXISTS == 'false'
        run: |
          aws rds create-db-instance \
            --db-instance-identifier ${{ env.DB_INSTANCE_IDENTIFIER }} \
            --db-instance-class ${{ env.DB_INSTANCE_CLASS }} \
            --engine ${{ env.DB_ENGINE }} \
            --allocated-storage ${{ env.DB_STORAGE }} \
            --master-username ${{ secrets.DB_NAME }} \
            --master-user-password ${{ secrets.DB_PASS }} \
            --backup-retention-period 7 \
            --no-multi-az

      - name: Wait for RDS to be available
        if: env.DB_EXISTS == 'false'
        run: |
          echo "Waiting for RDS instance to be available..."
          aws rds wait db-instance-available --db-instance-identifier ${{ env.DB_INSTANCE_IDENTIFIER }}

      - name: Get RDS Endpoint
        run: |
          ENDPOINT=$(aws rds describe-db-instances --db-instance-identifier ${{ env.DB_INSTANCE_IDENTIFIER }} --query 'DBInstances[0].Endpoint.Address' --output text)
          echo "RDS_ENDPOINT=$ENDPOINT" >> $GITHUB_ENV

      - name: Wait for DB to accept connections
        run: |
          echo "Waiting for DB to accept connections..."
          until pg_isready -h ${{ secrets.DB_HOST }} -p 5432 -U ${{ secrets.DB_USER }}; do
            echo "Waiting for database to be ready..."
            sleep 5
          done
          echo "Database is ready."
  
      - name: Create DB
        run: |
          docker run --rm \
            -e PGPASSWORD=${{ secrets.TF_VAR_DB_PASSWORD }} \
            postgres psql -h ${{ secrets.DB_HOST }} -U ${{ secrets.DB_USER }} -d postgres -c \
            "SELECT 'CREATE DATABASE FalloutDB' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'FalloutDB');"

      - name: Debug Connection String
        run: |
          echo "Using connection string: postgres://${{ secrets.DB_USER }}:${{ secrets.DB_PASS }}@${{ secrets.DB_HOST }}:5432/${{ secrets.DB_NAME }}"
