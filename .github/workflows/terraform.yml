name: "Terraform Deployment"

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  tf_deploy:
    name: "TF deploy"
    env:
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        TF_VAR_db_username: ${{ secrets.DB_USER }}
        TF_VAR_db_password: ${{ secrets.DB_PASS }}
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0

      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v3
        with:
            aws-region: 'af-south-1'

      - name: "Initialize Terraform"
        run: terraform init

      - name: "Check if DB Subnet Group Exists"
        run: |
            if aws rds describe-db-subnet-groups --db-subnet-group-name rds-subnet-group 2>&1 | grep -q "DBSubnetGroupNotFoundFault"; then
            echo "Subnet group does not exist, proceeding with Terraform apply."
            else
            echo "Importing existing subnet group into Terraform..."
            terraform import aws_db_subnet_group.rds_subnet_group rds-subnet-group || echo "Already imported."
            fi

      - name: "Terraform Plan"
        run: terraform plan

      - name: "Terraform Apply"
        run: terraform apply -auto-approve

      - name: "Save DB Endpoint"
        run: echo "$(terraform output -raw db_endpoint)" > db_host.txt

      - name: "Save DB Port"
        run: echo "$(terraform output -raw db_port)" > db_port.txt

      - name: "Upload DB Info Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: db-info
          path: |
            db_host.txt
            db_port.txt

      - name: Create Database if not exists
        run: |
          echo "Checking if FalloutDB exists..."
          DB_EXISTS=$(PGPASSWORD=${{ secrets.DB_PASS }} psql -h $(cat db_host.txt) -U ${{ secrets.DB_USER }} -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname='${{ secrets.DB_NAME }}'")
          if [[ "$DB_EXISTS" != "1" ]]; then
            echo "Creating ${{ secrets.DB_NAME }}..."
            PGPASSWORD=${{ secrets.DB_PASS }} psql -h $(cat db_host.txt) -U ${{ secrets.DB_USER }} -d postgres -c "CREATE DATABASE ${{ secrets.DB_NAME }}"
            echo "${{ secrets.DB_NAME }} created."
          else
            echo "${{ secrets.DB_NAME }} already exists."
          fi